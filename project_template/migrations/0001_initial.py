# Generated by Django 2.2.9 on 2020-02-01 15:52

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import project_template.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Declaration',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('progress', models.DecimalField(decimal_places=3, default=0, max_digits=6, validators=[django.core.validators.MaxValueValidator(100), django.core.validators.MinValueValidator(0)])),
                ('url', models.URLField(max_length=500)),
                ('position', models.CharField(choices=[('GENERAL_SECRETARY', 'Secretar General'), ('DEPUTY', 'Deputat'), ('SENATOR', 'Senator'), ('MEMBER_OF_PARLIAMENT', 'Parlamentar'), ('PRIME_MINISTER', 'Prim Ministru'), ('VICE_PRIME_MINISTER', 'Vice Prim Ministru'), ('MINISTER', 'Minister'), ('DEPUTY_CHAMBER_PRESIDENT', 'Presedinte Camera Deputatilor'), ('SENATE_PRESIDENT', 'Presedinte Senat'), ('PRESIDENT', 'Presedinte'), ('COUNSELOR', 'Consilier'), ('STATE_SECRETARY', 'Secretar de Stat'), ('OTHER', 'Alta Valoare')], max_length=128, verbose_name='Functie')),
                ('date', models.DateField(verbose_name='Data completare')),
                ('institution', models.CharField(choices=[('GOVERNMENT', 'Guvernul Romaniei'), ('PARLIAMENT', 'Parlamentul Romaniei '), ('SENATE', 'Senat'), ('DEPUTIES_CHAMBER', 'Camera Deputatilor'), ('GENERAL_GOVERNMENT_SECRETARY', 'Secretariatul General al Guvernului'), ('PUBLIC_ADMIN_MINISTRY', 'Ministerul Dezvoltarii Regionale si Administratiei Publice'), ('ENVIRONMENT_MINISTRY', 'Ministerul Mediului'), ('INTERIOR_AFFAIRS_MINISTRY', 'Ministerul Afacerilor Interne'), ('EXTERIOR_AFFAIRS_MINISTRY', 'Ministerul Afacerilor Externe'), ('DEFENSE_MINSTRY', 'Ministerul Apararii Nationale'), ('FINANCES_MINISTRY', 'Ministerul Finantelor Publice'), ('JUSTICE_MINISTRY', 'Ministerul Justitiei'), ('AGRICULTURE_MINISTRY', 'Ministerul Agriculturii si Dezvoltarii Rurale'), ('EDUCATION_MINISTRY', 'Ministerul Educatiei Nationale'), ('LABOR_MINISTRY', 'Ministerul Muncii si Justitiei Sociale '), ('ECONOMY_MINISTRY', 'Ministerul Economiei'), ('ENERGY_MINISTRY', 'Ministerul Energiei'), ('TRANSPORTATION_MINISTRY', 'Ministerul Transporturilor'), ('EUROPEAN_FUNDS_MINISTRY', 'Ministerul Fondurilor Europene'), ('BUSINESS_MINISTRY', 'Ministerul pentru Mediul de Afaceri,Comert si Antreprenoriat'), ('HEALTH_MINISTRY', 'Ministerul Sanatatii'), ('CULTURE_MINISTRY', 'Ministerul Culturii si Identitatii Nationale'), ('FOREST_MINISTRY', 'Ministerul Apelor si Padurilor'), ('RESEARCH_MINISTRY', 'Ministerul Cercetarii si Inovarii'), ('COMMUNICATION_MINISTRY', 'Ministerul Comunicatiilor si Societatii Informationale'), ('YOUTH_MINISTRY', 'Ministerul Tineretului si Sportului'), ('TOURISM_MINISTRY', 'Ministerul Turismului'), ('EVERYWHERE_MINISTRY', 'Ministerul pentru Romanii de Pretutindeni'), ('PARLIAMENT_MINISTRY', 'Ministerul pentru Relatia cu Parlamentul'), ('OTHER', 'Alta Valoare')], max_length=128, verbose_name='Institutie')),
                ('declaration_type', models.CharField(choices=[('GOVERNMENT', 'Guvernul Romaniei'), ('PARLIAMENT', 'Parlamentul Romaniei '), ('SENATE', 'Senat'), ('DEPUTIES_CHAMBER', 'Camera Deputatilor'), ('GENERAL_GOVERNMENT_SECRETARY', 'Secretariatul General al Guvernului'), ('PUBLIC_ADMIN_MINISTRY', 'Ministerul Dezvoltarii Regionale si Administratiei Publice'), ('ENVIRONMENT_MINISTRY', 'Ministerul Mediului'), ('INTERIOR_AFFAIRS_MINISTRY', 'Ministerul Afacerilor Interne'), ('EXTERIOR_AFFAIRS_MINISTRY', 'Ministerul Afacerilor Externe'), ('DEFENSE_MINSTRY', 'Ministerul Apararii Nationale'), ('FINANCES_MINISTRY', 'Ministerul Finantelor Publice'), ('JUSTICE_MINISTRY', 'Ministerul Justitiei'), ('AGRICULTURE_MINISTRY', 'Ministerul Agriculturii si Dezvoltarii Rurale'), ('EDUCATION_MINISTRY', 'Ministerul Educatiei Nationale'), ('LABOR_MINISTRY', 'Ministerul Muncii si Justitiei Sociale '), ('ECONOMY_MINISTRY', 'Ministerul Economiei'), ('ENERGY_MINISTRY', 'Ministerul Energiei'), ('TRANSPORTATION_MINISTRY', 'Ministerul Transporturilor'), ('EUROPEAN_FUNDS_MINISTRY', 'Ministerul Fondurilor Europene'), ('BUSINESS_MINISTRY', 'Ministerul pentru Mediul de Afaceri,Comert si Antreprenoriat'), ('HEALTH_MINISTRY', 'Ministerul Sanatatii'), ('CULTURE_MINISTRY', 'Ministerul Culturii si Identitatii Nationale'), ('FOREST_MINISTRY', 'Ministerul Apelor si Padurilor'), ('RESEARCH_MINISTRY', 'Ministerul Cercetarii si Inovarii'), ('COMMUNICATION_MINISTRY', 'Ministerul Comunicatiilor si Societatii Informationale'), ('YOUTH_MINISTRY', 'Ministerul Tineretului si Sportului'), ('TOURISM_MINISTRY', 'Ministerul Turismului'), ('EVERYWHERE_MINISTRY', 'Ministerul pentru Romanii de Pretutindeni'), ('PARLIAMENT_MINISTRY', 'Ministerul pentru Relatia cu Parlamentul'), ('OTHER', 'Alta Valoare')], max_length=128, verbose_name='Tip declaratie')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='OtherActivesTable',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('count', models.IntegerField(verbose_name='The number of rows')),
                ('declaration', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='project_template.Declaration')),
            ],
        ),
        migrations.CreateModel(
            name='OwnedAutomobileTable',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('count', models.IntegerField(verbose_name='The number of rows')),
                ('declaration', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='project_template.Declaration')),
            ],
        ),
        migrations.CreateModel(
            name='OwnedBankAccountsTable',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('count', models.IntegerField(verbose_name='The number of rows')),
                ('declaration', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='project_template.Declaration')),
            ],
        ),
        migrations.CreateModel(
            name='OwnedBuildingsTable',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('count', models.IntegerField(verbose_name='The number of rows')),
                ('declaration', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='project_template.Declaration')),
            ],
        ),
        migrations.CreateModel(
            name='OwnedDebtsTable',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('count', models.IntegerField(verbose_name='The number of rows')),
                ('declaration', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='project_template.Declaration')),
            ],
        ),
        migrations.CreateModel(
            name='OwnedExtraValuableTable',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('count', models.IntegerField(verbose_name='The number of rows')),
                ('declaration', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='project_template.Declaration')),
            ],
        ),
        migrations.CreateModel(
            name='OwnedGoodsOrServicesTable',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('count', models.IntegerField(verbose_name='The number of rows')),
                ('declaration', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='project_template.Declaration')),
            ],
        ),
        migrations.CreateModel(
            name='OwnedIncomeFromAgriculturalActivitiesTable',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('count', models.IntegerField(verbose_name='The number of rows')),
                ('declaration', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='project_template.Declaration')),
            ],
        ),
        migrations.CreateModel(
            name='OwnedIncomeFromDeferredUseOfGoodsTable',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('count', models.IntegerField(verbose_name='The number of rows')),
                ('declaration', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='project_template.Declaration')),
            ],
        ),
        migrations.CreateModel(
            name='OwnedIncomeFromGamblingTable',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('count', models.IntegerField(verbose_name='The number of rows')),
                ('declaration', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='project_template.Declaration')),
            ],
        ),
        migrations.CreateModel(
            name='OwnedIncomeFromIndependentActivitiesTable',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('count', models.IntegerField(verbose_name='The number of rows')),
                ('declaration', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='project_template.Declaration')),
            ],
        ),
        migrations.CreateModel(
            name='OwnedIncomeFromInvestmentsTable',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('count', models.IntegerField(verbose_name='The number of rows')),
                ('declaration', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='project_template.Declaration')),
            ],
        ),
        migrations.CreateModel(
            name='OwnedIncomeFromOtherSourcesTable',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('count', models.IntegerField(verbose_name='The number of rows')),
                ('declaration', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='project_template.Declaration')),
            ],
        ),
        migrations.CreateModel(
            name='OwnedIncomeFromPensionsTable',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('count', models.IntegerField(verbose_name='The number of rows')),
                ('declaration', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='project_template.Declaration')),
            ],
        ),
        migrations.CreateModel(
            name='OwnedIncomeFromSalariesTable',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('count', models.IntegerField(verbose_name='The number of rows')),
                ('declaration', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='project_template.Declaration')),
            ],
        ),
        migrations.CreateModel(
            name='OwnedInvestmentsOver5KTable',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('count', models.IntegerField(verbose_name='The number of rows')),
                ('declaration', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='project_template.Declaration')),
            ],
        ),
        migrations.CreateModel(
            name='OwnedJewelryTable',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('count', models.IntegerField(verbose_name='The number of rows')),
                ('declaration', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='project_template.Declaration')),
            ],
        ),
        migrations.CreateModel(
            name='OwnedLandTable',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('count', models.IntegerField(verbose_name='The number of rows')),
                ('declaration', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='project_template.Declaration')),
            ],
        ),
        migrations.CreateModel(
            name='Person',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=128, verbose_name='Nume persoana')),
                ('previous_name', models.CharField(blank=True, max_length=128, null=True, verbose_name='Nume anterior')),
                ('initials', models.CharField(blank=True, max_length=10, null=True, verbose_name='Initiale')),
                ('surname', models.CharField(max_length=128, verbose_name='Prenume')),
            ],
        ),
        migrations.CreateModel(
            name='Politician',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=128, verbose_name='Name')),
                ('surname', models.CharField(max_length=128, verbose_name='Surname')),
                ('initials', models.CharField(max_length=20, verbose_name='Initials')),
                ('previous_name', models.CharField(blank=True, max_length=128, verbose_name='Previous Name')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='OwnedLandTableEntry',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('county', models.CharField(choices=[('Alba', 'Alba'), ('Arad', 'Arad'), ('Arges', 'Arges'), ('Bacau', 'Bacau'), ('Bihor', 'Bihor'), ('Bistrita-Nasaud', 'Bistrita-Nasaud'), ('Botosani', 'Botosani'), ('Braila', 'Braila'), ('Brasov', 'Brasov'), ('Bucuresti', 'Bucuresti'), ('Buzau', 'Buzau'), ('Calarasi', 'Calarasi'), ('Caras-Severin', 'Caras-Severin'), ('Cluj', 'Cluj'), ('Constanta', 'Constanta'), ('Covasna', 'Covasna'), ('Dambovita', 'Dambovita'), ('Dolj', 'Dolj'), ('Galati', 'Galati'), ('Giurgiu', 'Giurgiu'), ('Gorj', 'Gorj'), ('Harghita', 'Harghita'), ('Hunedoara', 'Hunedoara'), ('Ialomita', 'Ialomita'), ('Iasi', 'Iasi'), ('Ilfov', 'Ilfov'), ('Maramures', 'Maramures'), ('Mehedinti', 'Mehedinti'), ('Mures', 'Mures'), ('Neamt', 'Neamt'), ('Olt', 'Olt'), ('Prahova', 'Prahova'), ('Salaj', 'Salaj'), ('Satu Mare', 'Satu Mare'), ('Sibiu', 'Sibiu'), ('Suceava', 'Suceava'), ('Teleorman', 'Teleorman'), ('Timis', 'Timis'), ('Tulcea', 'Tulcea'), ('Valcea', 'Valcea'), ('Vaslui', 'Vaslui'), ('Vrancea', 'Vrancea')], max_length=32, verbose_name='Judet')),
                ('city_commune', models.CharField(blank=True, max_length=32, null=True, verbose_name='Localitate')),
                ('address', models.CharField(blank=True, max_length=64, null=True, verbose_name='Adresa')),
                ('category', models.CharField(choices=[('AGRICULTURAL', 'Agricol'), ('FOREST', 'Forestier'), ('URBAN', 'Intravilan'), ('LAKE', 'Lucia de apa'), ('OTHER', 'Alte categorii')], max_length=32, verbose_name='Categorie')),
                ('acquisition_year', models.IntegerField(verbose_name='Anul dobandirii')),
                ('surface', models.FloatField(verbose_name='Suprafata mp')),
                ('share_ratio', models.DecimalField(decimal_places=2, max_digits=5, validators=[project_template.models.validate_percentage], verbose_name='Cota-parte')),
                ('taxable_value', models.FloatField(blank=True, verbose_name='Valoarea de impozitare')),
                ('taxable_value_currency', models.CharField(choices=[('EUR', 'EUR'), ('RON', 'RON'), ('USD', 'USD'), ('GBP', 'GBP'), ('CAD', 'CAD'), ('CHF', 'CHF'), ('ALTELE', 'OTHER')], max_length=16, verbose_name='Valuta')),
                ('attainment_type', models.CharField(blank=True, choices=[('PURCHASE', 'Cumparare/Contract Vanzare Cumparare'), ('CONSTRUCTION', 'Construire'), ('DONATION', 'Donatie'), ('RETROCEDARE', 'Retrocedare'), ('RENT', 'Inchiriere'), ('INHERITANCE', 'Mostenire'), ('LEASING', 'Leasing'), ('OTHER', 'Alt mod')], max_length=32, verbose_name='Modul de dobandire')),
                ('observations', models.CharField(blank=True, max_length=256, verbose_name='Observatii')),
                ('coowner', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='project_template.Person')),
                ('table', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='project_template.OwnedLandTable')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='OwnedJewelryTableEntry',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('summary_description', models.CharField(max_length=256, verbose_name='Descriere sumara')),
                ('acquisition_year', models.IntegerField(verbose_name='Anul dobandirii')),
                ('goods_value', models.IntegerField(verbose_name='Suma')),
                ('currency', models.CharField(choices=[('EUR', 'EUR'), ('RON', 'RON'), ('USD', 'USD'), ('GBP', 'GBP'), ('CAD', 'CAD'), ('CHF', 'CHF'), ('ALTELE', 'OTHER')], max_length=16, verbose_name='Valuta')),
                ('table', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='project_template.OwnedJewelryTable')),
            ],
        ),
        migrations.CreateModel(
            name='OwnedInvestmentsOver5KTableEntry',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('issue_title', models.CharField(blank=True, max_length=128, null=True, verbose_name='Emitent titlu')),
                ('shareholder_society', models.CharField(blank=True, max_length=128, null=True, verbose_name='Societate in care persoana este actionar sau asociat')),
                ('type_of_investment', models.CharField(choices=[('VALUE_PAPERS', 'HARTII DE VALOARE'), ('SHARES', 'ACTIUNI/PARTI SOCIALE'), ('PERSONAL_LOANS', 'IMPRUMUTURI ACORDATE IN NUME PERSONAL')], max_length=128, verbose_name='Tipul')),
                ('number_of_stocks', models.IntegerField(blank=True, null=True, verbose_name='Numar de titluri')),
                ('share_ratio', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True, validators=[project_template.models.validate_percentage], verbose_name='Cota de participare')),
                ('total_value', models.FloatField(verbose_name='Valoare totala la zi')),
                ('currency', models.CharField(choices=[('EUR', 'EUR'), ('RON', 'RON'), ('USD', 'USD'), ('GBP', 'GBP'), ('CAD', 'CAD'), ('CHF', 'CHF'), ('ALTELE', 'OTHER')], max_length=16, verbose_name='Valuta')),
                ('loan_beneficiary', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='project_template.Person')),
                ('table', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='project_template.OwnedInvestmentsOver5KTable')),
            ],
        ),
        migrations.CreateModel(
            name='OwnedIncomeFromSalariesTableEntry',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('county', models.CharField(choices=[('Alba', 'Alba'), ('Arad', 'Arad'), ('Arges', 'Arges'), ('Bacau', 'Bacau'), ('Bihor', 'Bihor'), ('Bistrita-Nasaud', 'Bistrita-Nasaud'), ('Botosani', 'Botosani'), ('Braila', 'Braila'), ('Brasov', 'Brasov'), ('Bucuresti', 'Bucuresti'), ('Buzau', 'Buzau'), ('Calarasi', 'Calarasi'), ('Caras-Severin', 'Caras-Severin'), ('Cluj', 'Cluj'), ('Constanta', 'Constanta'), ('Covasna', 'Covasna'), ('Dambovita', 'Dambovita'), ('Dolj', 'Dolj'), ('Galati', 'Galati'), ('Giurgiu', 'Giurgiu'), ('Gorj', 'Gorj'), ('Harghita', 'Harghita'), ('Hunedoara', 'Hunedoara'), ('Ialomita', 'Ialomita'), ('Iasi', 'Iasi'), ('Ilfov', 'Ilfov'), ('Maramures', 'Maramures'), ('Mehedinti', 'Mehedinti'), ('Mures', 'Mures'), ('Neamt', 'Neamt'), ('Olt', 'Olt'), ('Prahova', 'Prahova'), ('Salaj', 'Salaj'), ('Satu Mare', 'Satu Mare'), ('Sibiu', 'Sibiu'), ('Suceava', 'Suceava'), ('Teleorman', 'Teleorman'), ('Timis', 'Timis'), ('Tulcea', 'Tulcea'), ('Valcea', 'Valcea'), ('Vaslui', 'Vaslui'), ('Vrancea', 'Vrancea')], max_length=32, verbose_name='Judet')),
                ('city_commune', models.CharField(blank=True, max_length=32, null=True, verbose_name='Localitate')),
                ('address', models.CharField(blank=True, max_length=64, null=True, verbose_name='Adresa')),
                ('holder_relationship', models.CharField(choices=[('HOLDER', 'TITULAR'), ('SPOUSE', 'SOT/SOTIE'), ('CHILDREN', 'COPII')], max_length=128, verbose_name='Cine a realizat venitul')),
                ('source_of_goods', models.CharField(max_length=128, verbose_name='Sursa venitului: nume')),
                ('service', models.CharField(blank=True, max_length=128, null=True, verbose_name='Serviciul prestat/Obiectul generator de venit')),
                ('annual_income', models.FloatField(verbose_name='Venitul anual incasat')),
                ('currency', models.CharField(choices=[('EUR', 'EUR'), ('RON', 'RON'), ('USD', 'USD'), ('GBP', 'GBP'), ('CAD', 'CAD'), ('CHF', 'CHF'), ('ALTELE', 'OTHER')], max_length=16, verbose_name='Valuta')),
                ('person', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='project_template.Person')),
                ('table', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='project_template.OwnedIncomeFromSalariesTable')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='OwnedIncomeFromPensionsTableEntry',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('county', models.CharField(choices=[('Alba', 'Alba'), ('Arad', 'Arad'), ('Arges', 'Arges'), ('Bacau', 'Bacau'), ('Bihor', 'Bihor'), ('Bistrita-Nasaud', 'Bistrita-Nasaud'), ('Botosani', 'Botosani'), ('Braila', 'Braila'), ('Brasov', 'Brasov'), ('Bucuresti', 'Bucuresti'), ('Buzau', 'Buzau'), ('Calarasi', 'Calarasi'), ('Caras-Severin', 'Caras-Severin'), ('Cluj', 'Cluj'), ('Constanta', 'Constanta'), ('Covasna', 'Covasna'), ('Dambovita', 'Dambovita'), ('Dolj', 'Dolj'), ('Galati', 'Galati'), ('Giurgiu', 'Giurgiu'), ('Gorj', 'Gorj'), ('Harghita', 'Harghita'), ('Hunedoara', 'Hunedoara'), ('Ialomita', 'Ialomita'), ('Iasi', 'Iasi'), ('Ilfov', 'Ilfov'), ('Maramures', 'Maramures'), ('Mehedinti', 'Mehedinti'), ('Mures', 'Mures'), ('Neamt', 'Neamt'), ('Olt', 'Olt'), ('Prahova', 'Prahova'), ('Salaj', 'Salaj'), ('Satu Mare', 'Satu Mare'), ('Sibiu', 'Sibiu'), ('Suceava', 'Suceava'), ('Teleorman', 'Teleorman'), ('Timis', 'Timis'), ('Tulcea', 'Tulcea'), ('Valcea', 'Valcea'), ('Vaslui', 'Vaslui'), ('Vrancea', 'Vrancea')], max_length=32, verbose_name='Judet')),
                ('city_commune', models.CharField(blank=True, max_length=32, null=True, verbose_name='Localitate')),
                ('address', models.CharField(blank=True, max_length=64, null=True, verbose_name='Adresa')),
                ('holder_relationship', models.CharField(choices=[('HOLDER', 'TITULAR'), ('SPOUSE', 'SOT/SOTIE'), ('CHILDREN', 'COPII')], max_length=128, verbose_name='Cine a realizat venitul')),
                ('source_of_goods', models.CharField(max_length=128, verbose_name='Sursa venitului: nume')),
                ('service', models.CharField(blank=True, max_length=128, null=True, verbose_name='Serviciul prestat/Obiectul generator de venit')),
                ('annual_income', models.FloatField(verbose_name='Venitul anual incasat')),
                ('currency', models.CharField(choices=[('EUR', 'EUR'), ('RON', 'RON'), ('USD', 'USD'), ('GBP', 'GBP'), ('CAD', 'CAD'), ('CHF', 'CHF'), ('ALTELE', 'OTHER')], max_length=16, verbose_name='Valuta')),
                ('ex_position', models.CharField(max_length=128, verbose_name='Pozitia detinuta')),
                ('person', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='project_template.Person')),
                ('table', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='project_template.OwnedIncomeFromPensionsTable')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='OwnedIncomeFromOtherSourcesTableEntry',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('county', models.CharField(choices=[('Alba', 'Alba'), ('Arad', 'Arad'), ('Arges', 'Arges'), ('Bacau', 'Bacau'), ('Bihor', 'Bihor'), ('Bistrita-Nasaud', 'Bistrita-Nasaud'), ('Botosani', 'Botosani'), ('Braila', 'Braila'), ('Brasov', 'Brasov'), ('Bucuresti', 'Bucuresti'), ('Buzau', 'Buzau'), ('Calarasi', 'Calarasi'), ('Caras-Severin', 'Caras-Severin'), ('Cluj', 'Cluj'), ('Constanta', 'Constanta'), ('Covasna', 'Covasna'), ('Dambovita', 'Dambovita'), ('Dolj', 'Dolj'), ('Galati', 'Galati'), ('Giurgiu', 'Giurgiu'), ('Gorj', 'Gorj'), ('Harghita', 'Harghita'), ('Hunedoara', 'Hunedoara'), ('Ialomita', 'Ialomita'), ('Iasi', 'Iasi'), ('Ilfov', 'Ilfov'), ('Maramures', 'Maramures'), ('Mehedinti', 'Mehedinti'), ('Mures', 'Mures'), ('Neamt', 'Neamt'), ('Olt', 'Olt'), ('Prahova', 'Prahova'), ('Salaj', 'Salaj'), ('Satu Mare', 'Satu Mare'), ('Sibiu', 'Sibiu'), ('Suceava', 'Suceava'), ('Teleorman', 'Teleorman'), ('Timis', 'Timis'), ('Tulcea', 'Tulcea'), ('Valcea', 'Valcea'), ('Vaslui', 'Vaslui'), ('Vrancea', 'Vrancea')], max_length=32, verbose_name='Judet')),
                ('city_commune', models.CharField(blank=True, max_length=32, null=True, verbose_name='Localitate')),
                ('address', models.CharField(blank=True, max_length=64, null=True, verbose_name='Adresa')),
                ('holder_relationship', models.CharField(choices=[('HOLDER', 'TITULAR'), ('SPOUSE', 'SOT/SOTIE'), ('CHILDREN', 'COPII')], max_length=128, verbose_name='Cine a realizat venitul')),
                ('source_of_goods', models.CharField(max_length=128, verbose_name='Sursa venitului: nume')),
                ('service', models.CharField(blank=True, max_length=128, null=True, verbose_name='Serviciul prestat/Obiectul generator de venit')),
                ('annual_income', models.FloatField(verbose_name='Venitul anual incasat')),
                ('currency', models.CharField(choices=[('EUR', 'EUR'), ('RON', 'RON'), ('USD', 'USD'), ('GBP', 'GBP'), ('CAD', 'CAD'), ('CHF', 'CHF'), ('ALTELE', 'OTHER')], max_length=16, verbose_name='Valuta')),
                ('person', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='project_template.Person')),
                ('table', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='project_template.OwnedIncomeFromOtherSourcesTable')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='OwnedIncomeFromInvestmentsTableEntry',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('county', models.CharField(choices=[('Alba', 'Alba'), ('Arad', 'Arad'), ('Arges', 'Arges'), ('Bacau', 'Bacau'), ('Bihor', 'Bihor'), ('Bistrita-Nasaud', 'Bistrita-Nasaud'), ('Botosani', 'Botosani'), ('Braila', 'Braila'), ('Brasov', 'Brasov'), ('Bucuresti', 'Bucuresti'), ('Buzau', 'Buzau'), ('Calarasi', 'Calarasi'), ('Caras-Severin', 'Caras-Severin'), ('Cluj', 'Cluj'), ('Constanta', 'Constanta'), ('Covasna', 'Covasna'), ('Dambovita', 'Dambovita'), ('Dolj', 'Dolj'), ('Galati', 'Galati'), ('Giurgiu', 'Giurgiu'), ('Gorj', 'Gorj'), ('Harghita', 'Harghita'), ('Hunedoara', 'Hunedoara'), ('Ialomita', 'Ialomita'), ('Iasi', 'Iasi'), ('Ilfov', 'Ilfov'), ('Maramures', 'Maramures'), ('Mehedinti', 'Mehedinti'), ('Mures', 'Mures'), ('Neamt', 'Neamt'), ('Olt', 'Olt'), ('Prahova', 'Prahova'), ('Salaj', 'Salaj'), ('Satu Mare', 'Satu Mare'), ('Sibiu', 'Sibiu'), ('Suceava', 'Suceava'), ('Teleorman', 'Teleorman'), ('Timis', 'Timis'), ('Tulcea', 'Tulcea'), ('Valcea', 'Valcea'), ('Vaslui', 'Vaslui'), ('Vrancea', 'Vrancea')], max_length=32, verbose_name='Judet')),
                ('city_commune', models.CharField(blank=True, max_length=32, null=True, verbose_name='Localitate')),
                ('address', models.CharField(blank=True, max_length=64, null=True, verbose_name='Adresa')),
                ('holder_relationship', models.CharField(choices=[('HOLDER', 'TITULAR'), ('SPOUSE', 'SOT/SOTIE'), ('CHILDREN', 'COPII')], max_length=128, verbose_name='Cine a realizat venitul')),
                ('source_of_goods', models.CharField(max_length=128, verbose_name='Sursa venitului: nume')),
                ('service', models.CharField(blank=True, max_length=128, null=True, verbose_name='Serviciul prestat/Obiectul generator de venit')),
                ('annual_income', models.FloatField(verbose_name='Venitul anual incasat')),
                ('currency', models.CharField(choices=[('EUR', 'EUR'), ('RON', 'RON'), ('USD', 'USD'), ('GBP', 'GBP'), ('CAD', 'CAD'), ('CHF', 'CHF'), ('ALTELE', 'OTHER')], max_length=16, verbose_name='Valuta')),
                ('person', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='project_template.Person')),
                ('table', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='project_template.OwnedIncomeFromInvestmentsTable')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='OwnedIncomeFromIndependentActivitiesTableEntry',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('county', models.CharField(choices=[('Alba', 'Alba'), ('Arad', 'Arad'), ('Arges', 'Arges'), ('Bacau', 'Bacau'), ('Bihor', 'Bihor'), ('Bistrita-Nasaud', 'Bistrita-Nasaud'), ('Botosani', 'Botosani'), ('Braila', 'Braila'), ('Brasov', 'Brasov'), ('Bucuresti', 'Bucuresti'), ('Buzau', 'Buzau'), ('Calarasi', 'Calarasi'), ('Caras-Severin', 'Caras-Severin'), ('Cluj', 'Cluj'), ('Constanta', 'Constanta'), ('Covasna', 'Covasna'), ('Dambovita', 'Dambovita'), ('Dolj', 'Dolj'), ('Galati', 'Galati'), ('Giurgiu', 'Giurgiu'), ('Gorj', 'Gorj'), ('Harghita', 'Harghita'), ('Hunedoara', 'Hunedoara'), ('Ialomita', 'Ialomita'), ('Iasi', 'Iasi'), ('Ilfov', 'Ilfov'), ('Maramures', 'Maramures'), ('Mehedinti', 'Mehedinti'), ('Mures', 'Mures'), ('Neamt', 'Neamt'), ('Olt', 'Olt'), ('Prahova', 'Prahova'), ('Salaj', 'Salaj'), ('Satu Mare', 'Satu Mare'), ('Sibiu', 'Sibiu'), ('Suceava', 'Suceava'), ('Teleorman', 'Teleorman'), ('Timis', 'Timis'), ('Tulcea', 'Tulcea'), ('Valcea', 'Valcea'), ('Vaslui', 'Vaslui'), ('Vrancea', 'Vrancea')], max_length=32, verbose_name='Judet')),
                ('city_commune', models.CharField(blank=True, max_length=32, null=True, verbose_name='Localitate')),
                ('address', models.CharField(blank=True, max_length=64, null=True, verbose_name='Adresa')),
                ('holder_relationship', models.CharField(choices=[('HOLDER', 'TITULAR'), ('SPOUSE', 'SOT/SOTIE'), ('CHILDREN', 'COPII')], max_length=128, verbose_name='Cine a realizat venitul')),
                ('source_of_goods', models.CharField(max_length=128, verbose_name='Sursa venitului: nume')),
                ('service', models.CharField(blank=True, max_length=128, null=True, verbose_name='Serviciul prestat/Obiectul generator de venit')),
                ('annual_income', models.FloatField(verbose_name='Venitul anual incasat')),
                ('currency', models.CharField(choices=[('EUR', 'EUR'), ('RON', 'RON'), ('USD', 'USD'), ('GBP', 'GBP'), ('CAD', 'CAD'), ('CHF', 'CHF'), ('ALTELE', 'OTHER')], max_length=16, verbose_name='Valuta')),
                ('person', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='project_template.Person')),
                ('table', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='project_template.OwnedIncomeFromIndependentActivitiesTable')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='OwnedIncomeFromGamblingTableEntry',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('county', models.CharField(choices=[('Alba', 'Alba'), ('Arad', 'Arad'), ('Arges', 'Arges'), ('Bacau', 'Bacau'), ('Bihor', 'Bihor'), ('Bistrita-Nasaud', 'Bistrita-Nasaud'), ('Botosani', 'Botosani'), ('Braila', 'Braila'), ('Brasov', 'Brasov'), ('Bucuresti', 'Bucuresti'), ('Buzau', 'Buzau'), ('Calarasi', 'Calarasi'), ('Caras-Severin', 'Caras-Severin'), ('Cluj', 'Cluj'), ('Constanta', 'Constanta'), ('Covasna', 'Covasna'), ('Dambovita', 'Dambovita'), ('Dolj', 'Dolj'), ('Galati', 'Galati'), ('Giurgiu', 'Giurgiu'), ('Gorj', 'Gorj'), ('Harghita', 'Harghita'), ('Hunedoara', 'Hunedoara'), ('Ialomita', 'Ialomita'), ('Iasi', 'Iasi'), ('Ilfov', 'Ilfov'), ('Maramures', 'Maramures'), ('Mehedinti', 'Mehedinti'), ('Mures', 'Mures'), ('Neamt', 'Neamt'), ('Olt', 'Olt'), ('Prahova', 'Prahova'), ('Salaj', 'Salaj'), ('Satu Mare', 'Satu Mare'), ('Sibiu', 'Sibiu'), ('Suceava', 'Suceava'), ('Teleorman', 'Teleorman'), ('Timis', 'Timis'), ('Tulcea', 'Tulcea'), ('Valcea', 'Valcea'), ('Vaslui', 'Vaslui'), ('Vrancea', 'Vrancea')], max_length=32, verbose_name='Judet')),
                ('city_commune', models.CharField(blank=True, max_length=32, null=True, verbose_name='Localitate')),
                ('address', models.CharField(blank=True, max_length=64, null=True, verbose_name='Adresa')),
                ('holder_relationship', models.CharField(choices=[('HOLDER', 'TITULAR'), ('SPOUSE', 'SOT/SOTIE'), ('CHILDREN', 'COPII')], max_length=128, verbose_name='Cine a realizat venitul')),
                ('source_of_goods', models.CharField(max_length=128, verbose_name='Sursa venitului: nume')),
                ('service', models.CharField(blank=True, max_length=128, null=True, verbose_name='Serviciul prestat/Obiectul generator de venit')),
                ('annual_income', models.FloatField(verbose_name='Venitul anual incasat')),
                ('currency', models.CharField(choices=[('EUR', 'EUR'), ('RON', 'RON'), ('USD', 'USD'), ('GBP', 'GBP'), ('CAD', 'CAD'), ('CHF', 'CHF'), ('ALTELE', 'OTHER')], max_length=16, verbose_name='Valuta')),
                ('person', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='project_template.Person')),
                ('table', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='project_template.OwnedIncomeFromGamblingTable')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='OwnedIncomeFromDeferredUseOfGoodsTableEntry',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('county', models.CharField(choices=[('Alba', 'Alba'), ('Arad', 'Arad'), ('Arges', 'Arges'), ('Bacau', 'Bacau'), ('Bihor', 'Bihor'), ('Bistrita-Nasaud', 'Bistrita-Nasaud'), ('Botosani', 'Botosani'), ('Braila', 'Braila'), ('Brasov', 'Brasov'), ('Bucuresti', 'Bucuresti'), ('Buzau', 'Buzau'), ('Calarasi', 'Calarasi'), ('Caras-Severin', 'Caras-Severin'), ('Cluj', 'Cluj'), ('Constanta', 'Constanta'), ('Covasna', 'Covasna'), ('Dambovita', 'Dambovita'), ('Dolj', 'Dolj'), ('Galati', 'Galati'), ('Giurgiu', 'Giurgiu'), ('Gorj', 'Gorj'), ('Harghita', 'Harghita'), ('Hunedoara', 'Hunedoara'), ('Ialomita', 'Ialomita'), ('Iasi', 'Iasi'), ('Ilfov', 'Ilfov'), ('Maramures', 'Maramures'), ('Mehedinti', 'Mehedinti'), ('Mures', 'Mures'), ('Neamt', 'Neamt'), ('Olt', 'Olt'), ('Prahova', 'Prahova'), ('Salaj', 'Salaj'), ('Satu Mare', 'Satu Mare'), ('Sibiu', 'Sibiu'), ('Suceava', 'Suceava'), ('Teleorman', 'Teleorman'), ('Timis', 'Timis'), ('Tulcea', 'Tulcea'), ('Valcea', 'Valcea'), ('Vaslui', 'Vaslui'), ('Vrancea', 'Vrancea')], max_length=32, verbose_name='Judet')),
                ('city_commune', models.CharField(blank=True, max_length=32, null=True, verbose_name='Localitate')),
                ('address', models.CharField(blank=True, max_length=64, null=True, verbose_name='Adresa')),
                ('holder_relationship', models.CharField(choices=[('HOLDER', 'TITULAR'), ('SPOUSE', 'SOT/SOTIE'), ('CHILDREN', 'COPII')], max_length=128, verbose_name='Cine a realizat venitul')),
                ('source_of_goods', models.CharField(max_length=128, verbose_name='Sursa venitului: nume')),
                ('service', models.CharField(blank=True, max_length=128, null=True, verbose_name='Serviciul prestat/Obiectul generator de venit')),
                ('annual_income', models.FloatField(verbose_name='Venitul anual incasat')),
                ('currency', models.CharField(choices=[('EUR', 'EUR'), ('RON', 'RON'), ('USD', 'USD'), ('GBP', 'GBP'), ('CAD', 'CAD'), ('CHF', 'CHF'), ('ALTELE', 'OTHER')], max_length=16, verbose_name='Valuta')),
                ('person', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='project_template.Person')),
                ('table', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='project_template.OwnedIncomeFromDeferredUseOfGoodsTable')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='OwnedIncomeFromAgriculturalActivitiesTableEntry',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('county', models.CharField(choices=[('Alba', 'Alba'), ('Arad', 'Arad'), ('Arges', 'Arges'), ('Bacau', 'Bacau'), ('Bihor', 'Bihor'), ('Bistrita-Nasaud', 'Bistrita-Nasaud'), ('Botosani', 'Botosani'), ('Braila', 'Braila'), ('Brasov', 'Brasov'), ('Bucuresti', 'Bucuresti'), ('Buzau', 'Buzau'), ('Calarasi', 'Calarasi'), ('Caras-Severin', 'Caras-Severin'), ('Cluj', 'Cluj'), ('Constanta', 'Constanta'), ('Covasna', 'Covasna'), ('Dambovita', 'Dambovita'), ('Dolj', 'Dolj'), ('Galati', 'Galati'), ('Giurgiu', 'Giurgiu'), ('Gorj', 'Gorj'), ('Harghita', 'Harghita'), ('Hunedoara', 'Hunedoara'), ('Ialomita', 'Ialomita'), ('Iasi', 'Iasi'), ('Ilfov', 'Ilfov'), ('Maramures', 'Maramures'), ('Mehedinti', 'Mehedinti'), ('Mures', 'Mures'), ('Neamt', 'Neamt'), ('Olt', 'Olt'), ('Prahova', 'Prahova'), ('Salaj', 'Salaj'), ('Satu Mare', 'Satu Mare'), ('Sibiu', 'Sibiu'), ('Suceava', 'Suceava'), ('Teleorman', 'Teleorman'), ('Timis', 'Timis'), ('Tulcea', 'Tulcea'), ('Valcea', 'Valcea'), ('Vaslui', 'Vaslui'), ('Vrancea', 'Vrancea')], max_length=32, verbose_name='Judet')),
                ('city_commune', models.CharField(blank=True, max_length=32, null=True, verbose_name='Localitate')),
                ('address', models.CharField(blank=True, max_length=64, null=True, verbose_name='Adresa')),
                ('holder_relationship', models.CharField(choices=[('HOLDER', 'TITULAR'), ('SPOUSE', 'SOT/SOTIE'), ('CHILDREN', 'COPII')], max_length=128, verbose_name='Cine a realizat venitul')),
                ('source_of_goods', models.CharField(max_length=128, verbose_name='Sursa venitului: nume')),
                ('service', models.CharField(blank=True, max_length=128, null=True, verbose_name='Serviciul prestat/Obiectul generator de venit')),
                ('annual_income', models.FloatField(verbose_name='Venitul anual incasat')),
                ('currency', models.CharField(choices=[('EUR', 'EUR'), ('RON', 'RON'), ('USD', 'USD'), ('GBP', 'GBP'), ('CAD', 'CAD'), ('CHF', 'CHF'), ('ALTELE', 'OTHER')], max_length=16, verbose_name='Valuta')),
                ('holder_type', models.CharField(choices=[('INSTITUTION', 'Institutie'), ('PERSON', 'Persoana')], max_length=120, verbose_name='Tipul detinatorului')),
                ('person', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='project_template.Person')),
                ('table', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='project_template.OwnedIncomeFromAgriculturalActivitiesTable')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='OwnedGoodsOrServicesTableEntry',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('county', models.CharField(choices=[('Alba', 'Alba'), ('Arad', 'Arad'), ('Arges', 'Arges'), ('Bacau', 'Bacau'), ('Bihor', 'Bihor'), ('Bistrita-Nasaud', 'Bistrita-Nasaud'), ('Botosani', 'Botosani'), ('Braila', 'Braila'), ('Brasov', 'Brasov'), ('Bucuresti', 'Bucuresti'), ('Buzau', 'Buzau'), ('Calarasi', 'Calarasi'), ('Caras-Severin', 'Caras-Severin'), ('Cluj', 'Cluj'), ('Constanta', 'Constanta'), ('Covasna', 'Covasna'), ('Dambovita', 'Dambovita'), ('Dolj', 'Dolj'), ('Galati', 'Galati'), ('Giurgiu', 'Giurgiu'), ('Gorj', 'Gorj'), ('Harghita', 'Harghita'), ('Hunedoara', 'Hunedoara'), ('Ialomita', 'Ialomita'), ('Iasi', 'Iasi'), ('Ilfov', 'Ilfov'), ('Maramures', 'Maramures'), ('Mehedinti', 'Mehedinti'), ('Mures', 'Mures'), ('Neamt', 'Neamt'), ('Olt', 'Olt'), ('Prahova', 'Prahova'), ('Salaj', 'Salaj'), ('Satu Mare', 'Satu Mare'), ('Sibiu', 'Sibiu'), ('Suceava', 'Suceava'), ('Teleorman', 'Teleorman'), ('Timis', 'Timis'), ('Tulcea', 'Tulcea'), ('Valcea', 'Valcea'), ('Vaslui', 'Vaslui'), ('Vrancea', 'Vrancea')], max_length=32, verbose_name='Judet')),
                ('city_commune', models.CharField(blank=True, max_length=32, null=True, verbose_name='Localitate')),
                ('address', models.CharField(blank=True, max_length=64, null=True, verbose_name='Adresa')),
                ('holder_relationship', models.CharField(choices=[('HOLDER', 'TITULAR'), ('SPOUSE', 'SOT/SOTIE'), ('CHILDREN', 'COPII')], max_length=128, verbose_name='Cine a realizat venitul')),
                ('source_of_goods', models.CharField(max_length=128, verbose_name='Sursa venitului: nume')),
                ('service', models.CharField(blank=True, max_length=128, null=True, verbose_name='Serviciul prestat/Obiectul generator de venit')),
                ('annual_income', models.FloatField(verbose_name='Venitul anual incasat')),
                ('currency', models.CharField(choices=[('EUR', 'EUR'), ('RON', 'RON'), ('USD', 'USD'), ('GBP', 'GBP'), ('CAD', 'CAD'), ('CHF', 'CHF'), ('ALTELE', 'OTHER')], max_length=16, verbose_name='Valuta')),
                ('person', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='project_template.Person')),
                ('table', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='project_template.OwnedGoodsOrServicesTable')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='OwnedExtraValuableTableEntry',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('county', models.CharField(choices=[('Alba', 'Alba'), ('Arad', 'Arad'), ('Arges', 'Arges'), ('Bacau', 'Bacau'), ('Bihor', 'Bihor'), ('Bistrita-Nasaud', 'Bistrita-Nasaud'), ('Botosani', 'Botosani'), ('Braila', 'Braila'), ('Brasov', 'Brasov'), ('Bucuresti', 'Bucuresti'), ('Buzau', 'Buzau'), ('Calarasi', 'Calarasi'), ('Caras-Severin', 'Caras-Severin'), ('Cluj', 'Cluj'), ('Constanta', 'Constanta'), ('Covasna', 'Covasna'), ('Dambovita', 'Dambovita'), ('Dolj', 'Dolj'), ('Galati', 'Galati'), ('Giurgiu', 'Giurgiu'), ('Gorj', 'Gorj'), ('Harghita', 'Harghita'), ('Hunedoara', 'Hunedoara'), ('Ialomita', 'Ialomita'), ('Iasi', 'Iasi'), ('Ilfov', 'Ilfov'), ('Maramures', 'Maramures'), ('Mehedinti', 'Mehedinti'), ('Mures', 'Mures'), ('Neamt', 'Neamt'), ('Olt', 'Olt'), ('Prahova', 'Prahova'), ('Salaj', 'Salaj'), ('Satu Mare', 'Satu Mare'), ('Sibiu', 'Sibiu'), ('Suceava', 'Suceava'), ('Teleorman', 'Teleorman'), ('Timis', 'Timis'), ('Tulcea', 'Tulcea'), ('Valcea', 'Valcea'), ('Vaslui', 'Vaslui'), ('Vrancea', 'Vrancea')], max_length=32, verbose_name='Judet')),
                ('city_commune', models.CharField(blank=True, max_length=32, null=True, verbose_name='Localitate')),
                ('address', models.CharField(blank=True, max_length=64, null=True, verbose_name='Adresa')),
                ('estrangement_goods_type', models.CharField(choices=[('APARTMENT', 'Apartament'), ('HOUSE', 'Casa de locuit'), ('VACATION_HOUSE', 'Casa de vacanta'), ('COMMERCIAL_SPACE', 'Spatii comerciale'), ('AUTOVEHICLE', 'Autovehicule/Autoturisme'), ('TRACTOR', 'Tractor'), ('AGRICULTURAL_VEHICLE', 'Masini agricole'), ('BOATS', 'Salupe'), ('YACHTS', 'Iahturi')], max_length=128, verbose_name='Natura bunului instrainat')),
                ('estrangement_date', models.DateField(verbose_name='Data instrainarii')),
                ('goods_separation_type', models.CharField(choices=[('SELL', 'Vanzare'), ('SEPARATION', 'Partaj'), ('DONATION', 'Donatie'), ('ARBITRATION', 'Executare'), ('OTHER', 'Alta forma')], max_length=64, verbose_name='Forma instrainarii')),
                ('value', models.IntegerField(verbose_name='Valoare')),
                ('currency', models.CharField(choices=[('EUR', 'EUR'), ('RON', 'RON'), ('USD', 'USD'), ('GBP', 'GBP'), ('CAD', 'CAD'), ('CHF', 'CHF'), ('ALTELE', 'OTHER')], max_length=16, verbose_name='Valuta')),
                ('receiver_of_goods', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='project_template.Person')),
                ('table', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='project_template.OwnedExtraValuableTable')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='OwnedDebtsTableEntry',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('lender', models.CharField(blank=True, choices=[('ALPHA_BANK', 'ALPHA BANK'), ('BCR', 'BANCA COMERCIALĂ ROMÂNĂ (OF THE ERSTE GROUP)'), ('ROMANIAN_BANK', 'BANCA ROMÂNEASCĂ (OF THE NATIONAL BANK OF GREECE GROUP)'), ('BANCPOST', 'BANCPOST (OF THE EUROBANK ERGASIAS GROUP)'), ('LEUMI', 'BANK LEUMI'), ('BRD', 'BRD – GROUPE SOCIÉTÉ GÉNÉRALE'), ('CREDIT_AGRICOLE', 'CRÉDIT AGRICOLE (FORMERLY EMPORIKI BANK)'), ('CREDIT_EUROPE', 'CREDIT EUROPE BANK'), ('GARANTI', 'GARANTI BANK'), ('IDEA', 'IDEA BANK (FORMERLY ROMANIAN INTERNATIONAL BANK)'), ('INTESA', 'INTESA SANPAOLO'), ('MARFIN', 'MARFIN BANK (FORMERLY EGNATIA BANK)'), ('OTP', 'OTP BANK'), ('PIRAEUS', 'PIRAEUS BANK'), ('PORSCHE', 'PORSCHE BANK'), ('PROCREDIT', 'PROCREDIT BANK'), ('RAIFFEISEN', 'RAIFFEISEN BANK'), ('UNICREDIT', 'UNICREDIT BANK'), ('RAILRAOD_BANK', 'BANCA COMERCIALA FEROVIARA'), ('ATEBANK', 'BANCA ROMANA DE CREDITE SI INVESTITII (FORMERLY ATEBANK ROMANIA)'), ('TRANSILVANIA', 'BANCA TRANSILVANIA'), ('CEC', 'CEC BANK'), ('LIBRA', 'LIBRA INTERNET BANK'), ('PATRIA', 'PATRIA BANK'), ('EXIMBANK', 'EXIMBANK (EXPORT-IMPORT BANK OF ROMANIA)'), ('ING', 'ING BANK N.V. (OF ING GROUP)'), ('PARIBAS', 'BNP PARIBAS PERSONAL FINANCE')], max_length=128, null=True, verbose_name='Creditor')),
                ('debt_type', models.CharField(choices=[('IMPRUMUT', 'IMPRUMUT'), ('DEBIT', 'DEBIT'), ('MORTGAGE', 'IPOTECA'), ('ISSUED_GARANTIES', 'GARANTII EMISE'), ('LEASING_ACQUIRED_GOODS', 'BUNURI ACHIZIONATE LEASING')], max_length=30, verbose_name='Tip datorie')),
                ('acquirement_year', models.IntegerField(verbose_name='Contractat in anul')),
                ('due_date', models.IntegerField(verbose_name='Scadent la')),
                ('value', models.FloatField(verbose_name='Valoare')),
                ('currency', models.CharField(choices=[('EUR', 'EUR'), ('RON', 'RON'), ('USD', 'USD'), ('GBP', 'GBP'), ('CAD', 'CAD'), ('CHF', 'CHF'), ('ALTELE', 'OTHER')], max_length=16, verbose_name='Valuta')),
                ('person', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='project_template.Person')),
                ('table', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='project_template.OwnedDebtsTable')),
            ],
        ),
        migrations.CreateModel(
            name='OwnedBuildingsTableEntry',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('county', models.CharField(choices=[('Alba', 'Alba'), ('Arad', 'Arad'), ('Arges', 'Arges'), ('Bacau', 'Bacau'), ('Bihor', 'Bihor'), ('Bistrita-Nasaud', 'Bistrita-Nasaud'), ('Botosani', 'Botosani'), ('Braila', 'Braila'), ('Brasov', 'Brasov'), ('Bucuresti', 'Bucuresti'), ('Buzau', 'Buzau'), ('Calarasi', 'Calarasi'), ('Caras-Severin', 'Caras-Severin'), ('Cluj', 'Cluj'), ('Constanta', 'Constanta'), ('Covasna', 'Covasna'), ('Dambovita', 'Dambovita'), ('Dolj', 'Dolj'), ('Galati', 'Galati'), ('Giurgiu', 'Giurgiu'), ('Gorj', 'Gorj'), ('Harghita', 'Harghita'), ('Hunedoara', 'Hunedoara'), ('Ialomita', 'Ialomita'), ('Iasi', 'Iasi'), ('Ilfov', 'Ilfov'), ('Maramures', 'Maramures'), ('Mehedinti', 'Mehedinti'), ('Mures', 'Mures'), ('Neamt', 'Neamt'), ('Olt', 'Olt'), ('Prahova', 'Prahova'), ('Salaj', 'Salaj'), ('Satu Mare', 'Satu Mare'), ('Sibiu', 'Sibiu'), ('Suceava', 'Suceava'), ('Teleorman', 'Teleorman'), ('Timis', 'Timis'), ('Tulcea', 'Tulcea'), ('Valcea', 'Valcea'), ('Vaslui', 'Vaslui'), ('Vrancea', 'Vrancea')], max_length=32, verbose_name='Judet')),
                ('city_commune', models.CharField(blank=True, max_length=32, null=True, verbose_name='Localitate')),
                ('address', models.CharField(blank=True, max_length=64, null=True, verbose_name='Adresa')),
                ('category', models.IntegerField(choices=[(1, 'Apartament'), (2, 'Casa de locuit'), (3, 'Casa de vacanta'), (4, 'Spatii comerciale'), (5, 'Alta categorie')], verbose_name='Categorie')),
                ('acquisition_year', models.IntegerField(verbose_name='Anul dobandirii')),
                ('surface', models.FloatField(blank=True, verbose_name='Suprafata')),
                ('share_ratio', models.DecimalField(blank=True, decimal_places=2, max_digits=5, validators=[project_template.models.validate_percentage], verbose_name='Cota-parte')),
                ('taxable_value', models.FloatField(blank=True, verbose_name='Valoarea de impozitare')),
                ('taxable_value_currency', models.CharField(choices=[('EUR', 'EUR'), ('RON', 'RON'), ('USD', 'USD'), ('GBP', 'GBP'), ('CAD', 'CAD'), ('CHF', 'CHF'), ('ALTELE', 'OTHER')], max_length=16, verbose_name='Valuta')),
                ('attainment_type', models.CharField(blank=True, choices=[('PURCHASE', 'Cumparare/Contract Vanzare Cumparare'), ('CONSTRUCTION', 'Construire'), ('DONATION', 'Donatie'), ('RETROCEDARE', 'Retrocedare'), ('RENT', 'Inchiriere'), ('INHERITANCE', 'Mostenire'), ('LEASING', 'Leasing'), ('OTHER', 'Alt mod')], max_length=32, verbose_name='Modul de dobandire')),
                ('observations', models.CharField(blank=True, max_length=256, verbose_name='Observatii')),
                ('coowner', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='project_template.Person')),
                ('table', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='project_template.OwnedBuildingsTable')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='OwnedBankAccountsTableEntry',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('institution', models.CharField(choices=[('ALPHA_BANK', 'ALPHA BANK'), ('BCR', 'BANCA COMERCIALĂ ROMÂNĂ (OF THE ERSTE GROUP)'), ('ROMANIAN_BANK', 'BANCA ROMÂNEASCĂ (OF THE NATIONAL BANK OF GREECE GROUP)'), ('BANCPOST', 'BANCPOST (OF THE EUROBANK ERGASIAS GROUP)'), ('LEUMI', 'BANK LEUMI'), ('BRD', 'BRD – GROUPE SOCIÉTÉ GÉNÉRALE'), ('CREDIT_AGRICOLE', 'CRÉDIT AGRICOLE (FORMERLY EMPORIKI BANK)'), ('CREDIT_EUROPE', 'CREDIT EUROPE BANK'), ('GARANTI', 'GARANTI BANK'), ('IDEA', 'IDEA BANK (FORMERLY ROMANIAN INTERNATIONAL BANK)'), ('INTESA', 'INTESA SANPAOLO'), ('MARFIN', 'MARFIN BANK (FORMERLY EGNATIA BANK)'), ('OTP', 'OTP BANK'), ('PIRAEUS', 'PIRAEUS BANK'), ('PORSCHE', 'PORSCHE BANK'), ('PROCREDIT', 'PROCREDIT BANK'), ('RAIFFEISEN', 'RAIFFEISEN BANK'), ('UNICREDIT', 'UNICREDIT BANK'), ('RAILRAOD_BANK', 'BANCA COMERCIALA FEROVIARA'), ('ATEBANK', 'BANCA ROMANA DE CREDITE SI INVESTITII (FORMERLY ATEBANK ROMANIA)'), ('TRANSILVANIA', 'BANCA TRANSILVANIA'), ('CEC', 'CEC BANK'), ('LIBRA', 'LIBRA INTERNET BANK'), ('PATRIA', 'PATRIA BANK'), ('EXIMBANK', 'EXIMBANK (EXPORT-IMPORT BANK OF ROMANIA)'), ('ING', 'ING BANK N.V. (OF ING GROUP)'), ('PARIBAS', 'BNP PARIBAS PERSONAL FINANCE')], max_length=128, verbose_name='Instituția')),
                ('account_type', models.IntegerField(choices=[(1, 'Cont curent sau echivalente (inclusiv card)'), (2, 'Depozit bancar sau echivalente'), (3, 'Fonduri de investitii sau echivalente, inclusiv fonduri private de pensii sau alte sisteme cu acumulare (se vor declara cele aferente anului fiscal anterior)')], verbose_name='Tipul')),
                ('currency', models.CharField(choices=[('EUR', 'EUR'), ('RON', 'RON'), ('USD', 'USD'), ('GBP', 'GBP'), ('CAD', 'CAD'), ('CHF', 'CHF'), ('ALTELE', 'OTHER')], max_length=16, verbose_name='Valuta')),
                ('opening_year', models.IntegerField(verbose_name='Deschis in anul')),
                ('account_balance', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='Soldul')),
                ('table', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='project_template.OwnedBankAccountsTable')),
            ],
        ),
        migrations.CreateModel(
            name='OwnedAutomobileTableEntry',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('goods_type', models.CharField(choices=[('AUTOVEHICLE', 'Autovehicule/Autoturisme'), ('TRACTOR', 'Tractor'), ('AGRICULTURAL_VEHICLE', 'Masini agricole'), ('BOATS', 'Salupe'), ('YACHTS', 'Iahturi'), ('OTHER', 'Altele')], max_length=32, verbose_name='Tipul vehiculului')),
                ('brand', models.CharField(max_length=128, verbose_name='Marca')),
                ('no_owned', models.PositiveSmallIntegerField(verbose_name='Numar de bucati')),
                ('fabrication_year', models.IntegerField(verbose_name='Anul de fabricatie')),
                ('attainment_type', models.CharField(choices=[('PURCHASE', 'Cumparare/Contract Vanzare Cumparare'), ('CONSTRUCTION', 'Construire'), ('DONATION', 'Donatie'), ('RETROCEDARE', 'Retrocedare'), ('RENT', 'Inchiriere'), ('INHERITANCE', 'Mostenire'), ('LEASING', 'Leasing'), ('OTHER', 'Alt mod')], max_length=32, verbose_name='Modul de dobandire')),
                ('table', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='project_template.OwnedAutomobileTable')),
            ],
        ),
        migrations.CreateModel(
            name='OtherActivesTableEntry',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('active_type', models.CharField(max_length=128, verbose_name='Tipul activului')),
                ('active_value', models.FloatField(verbose_name='Valoarea activului')),
                ('currency', models.CharField(choices=[('EUR', 'EUR'), ('RON', 'RON'), ('USD', 'USD'), ('GBP', 'GBP'), ('CAD', 'CAD'), ('CHF', 'CHF'), ('ALTELE', 'OTHER')], max_length=16, verbose_name='Valuta')),
                ('table', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='project_template.OtherActivesTable')),
            ],
        ),
        migrations.AddField(
            model_name='declaration',
            name='politician',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='project_template.Politician'),
        ),
    ]
