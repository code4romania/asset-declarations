# Inspired from
# https://aws.amazon.com/blogs/opensource/github-actions-aws-fargate/
# https://www.theserverside.com/video/How-to-deploy-Docker-Hub-hosted-microservices-in-AWS-ECS

# Cluster and service must be created before hand:

# aws ecs create-cluster --cluster-name Code4Romania
# aws ecs register-task-definition --region eu-central-1
#     --cli-input-json file://`pwd`/.github/workflows/aws_deploy/task-def.json
# aws ecs create-service --service-name CatPol-service --task-definition CatPol-test-task:1
#     --desired-count 1 --launch-type "FARGATE"
#     --network-configuration "awsvpcConfiguration={subnets=[subnet-1234abcd],securityGroups=[sg-1234abcd]}"

on: [push, pull_request]

name: Build Docker image and deploy to Amazon ECS

env:
  RUN_ENVIRONMENT: dev

jobs:
  test:
    name: Test  GHA security
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v1
    - name: Script
      run: |
        ./foo.sh ${{ secrets.DOCKER_HUB_ORGANIZATION }}
        cat foo.txt

  # build:
  #   name: Build
  #   runs-on: ubuntu-latest

  #   steps:
  #   - name: Checkout
  #     uses: actions/checkout@v1

  #   - name: Build the Docker image
  #     id: build-image
  #     run: |
  #       DOCKER_TAG=${GITHUB_REF##*/}
  #       DOCKER_TAG=${DOCKER_TAG/\#/-}
  #       DOCKER_IMAGE_TAG="$DOCKER_TAG-$GITHUB_SHA"

  #       docker build . \
  #         --build-arg ENVIRONMENT=$RUN_ENVIRONMENT \
  #         --tag ${{ secrets.DOCKER_HUB_ORGANIZATION }}/${{ secrets.DOCKER_HUB_REPO }}:$DOCKER_IMAGE_TAG \

  #       echo "::set-output name=image::${{ secrets.DOCKER_HUB_ORGANIZATION }}/${{ secrets.DOCKER_HUB_REPO }}"
  #       echo "::set-output name=tag::$DOCKER_IMAGE_TAG"

  #   - name: Upload Docker image
  #     if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/develop'
  #     run: |
  #       echo ${{ secrets.DOCKER_HUB_PASSWORD }} | \
  #         docker login \
  #           -u ${{ secrets.DOCKER_HUB_USERNAME }} \
  #           --password-stdin
  #       docker push ${{ steps.build-image.outputs.image }}:${{ steps.build-image.outputs.tag}}

  #   - name: Tag Staging
  #     if: github.ref == 'refs/heads/develop'
  #     run: |
  #       docker tag \
  #           ${{ steps.build-image.outputs.image }}:${{ steps.build-image.outputs.tag}} \
  #           ${{ steps.build-image.outputs.image }}:staging
  #       docker push ${{ steps.build-image.outputs.image }}:staging

  #   - name: Tag Latest
  #     if: github.ref == 'refs/heads/master'
  #     run: |
  #       docker tag \
  #           ${{ steps.build-image.outputs.image }}:${{ steps.build-image.outputs.tag}} \
  #           ${{ steps.build-image.outputs.image }}:latest
  #       docker push ${{ steps.build-image.outputs.image }}:latest

  infra:
    name: Prepare Infrastructure
    # if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/develop'
    runs-on: ubuntu-latest
    # needs: build

    steps:
    - name: Checkout
      uses: actions/checkout@v1

    - name: 'Terraform Format'
      uses: hashicorp/terraform-github-actions@master
      with:
        tf_actions_version: 0.12.21
        tf_actions_subcommand: 'fmt'
        tf_actions_working_dir: '.github/workflows/aws_deploy/terraform'
        tf_actions_comment: 'false'
    - name: 'Terraform Init'
      uses: hashicorp/terraform-github-actions@master
      with:
        tf_actions_version: 0.12.21
        tf_actions_subcommand: 'init'
        tf_actions_working_dir: '.github/workflows/aws_deploy/terraform'
        tf_actions_comment: 'false'
    - name: 'Terraform Validate'
      uses: hashicorp/terraform-github-actions@master
      with:
        tf_actions_version: 0.12.21
        tf_actions_subcommand: 'validate'
        tf_actions_working_dir: '.github/workflows/aws_deploy/terraform'
        tf_actions_comment: 'false'
    - name: 'Terraform Plan'
      uses: hashicorp/terraform-github-actions@master
      with:
        tf_actions_version: 0.12.21
        tf_actions_subcommand: 'plan'
        tf_actions_working_dir: '.github/workflows/aws_deploy/terraform'
        tf_actions_comment: 'false'
        args: "--var secret=${{ secrets.DOCKER_HUB_ORGANIZATION }}"
    - name: 'Terraform Apply'
      uses: hashicorp/terraform-github-actions@master
      with:
        tf_actions_version: 0.12.21
        tf_actions_subcommand: 'apply'
        tf_actions_working_dir: '.github/workflows/aws_deploy/terraform'
        tf_actions_comment: 'false'
        args: "--var secret=${{ secrets.DOCKER_HUB_ORGANIZATION }}"

  # deploy:
  #   name: Deploy
  #   if: github.ref == 'refs/heads/master'
  #   runs-on: ubuntu-latest
  #   needs: infra

  #   steps:
  #   - name: Checkout
  #     uses: actions/checkout@v1

  #   - name: Configure AWS credentials
  #     uses: aws-actions/configure-aws-credentials@v1
  #     with:
  #       aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #       aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #       aws-region: eu-central-1

  #   - name: Fill in the new image ID in the Amazon ECS task definition
  #     id: task-def
  #     uses: aws-actions/amazon-ecs-render-task-definition@v1
  #     with:
  #       task-definition: .github/workflows/aws_deploy/task-def.json
  #       container-name: catpol
  #       image: ${{ secrets.DOCKER_HUB_ORGANIZATION }}/${{ secrets.DOCKER_HUB_REPO }}

  #   - name: Deploy Amazon ECS task definition
  #     uses: aws-actions/amazon-ecs-deploy-task-definition@v1
  #     with:
  #       task-definition: ${{ steps.task-def.outputs.task-definition }}
  #       service: CatPol-service
  #       cluster: CatPol
  #       wait-for-service-stability: true
