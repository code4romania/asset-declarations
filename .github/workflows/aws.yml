# Inspired from
# https://aws.amazon.com/blogs/opensource/github-actions-aws-fargate/
# https://www.theserverside.com/video/How-to-deploy-Docker-Hub-hosted-microservices-in-AWS-ECS

# Cluster and service must be created before hand:

# aws ecs create-cluster --cluster-name Code4Romania
# aws ecs register-task-definition --region eu-central-1 --cli-input-json file://`pwd`/aws_deploy/task-def.json
# aws ecs create-service --service-name CatPol-service --task-definition CatPol-test-task:1
#     --desired-count 1 --launch-type "FARGATE"
#     --network-configuration "awsvpcConfiguration={subnets=[subnet-1234abcd],securityGroups=[sg-1234abcd]}"

on:
  push:

name: Build Docker image and deploy to Amazon ECS

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    env:
      DOCKER_HUB_USERNAME: ovidiub13
      RUN_ENVIRONMENT: dev

    steps:
    - name: Checkout
      uses: actions/checkout@v1

    - name: Build the Docker image
      id: build-image
      run: |
        DOCKER_TAG=${GITHUB_REF##*/}
        DOCKER_TAG=${DOCKER_TAG/\#/-}
        docker build \
          --build-arg ENVIRONMENT=$RUN_ENVIRONMENT \
          -t $DOCKER_HUB_USERNAME/catpol:$DOCKER_TAG-$GITHUB_SHA \
          .
        echo "::set-output name=image::$DOCKER_HUB_USERNAME/catpol:$DOCKER_TAG-$GITHUB_SHA"

    - name: Upload Docker image
      run: |
        echo ${{secrets.DOCKER_HUB_PASSWORD}} | \
          docker login \
            -u $DOCKER_HUB_USERNAME \
            --password-stdin
        docker push ${{ steps.build-image.outputs.image }}

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: eu-central-1

    # - name: Login to Amazon ECR
    #   id: login-ecr
    #   uses: aws-actions/amazon-ecr-login@v1

    # - name: Build, tag, and push image to Amazon ECR
    #   id: build-image
    #   env:
    #     ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
    #     ECR_REPOSITORY: my-ecr-repo
    #     IMAGE_TAG: ${{ github.sha }}
    #   run: |
    #     # Build a docker container and
    #     # push it to ECR so that it can
    #     # be deployed to ECS.
    #     docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
    #     docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
    #     echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: aws_deploy/task-def.json
        container-name: catpol
        image: ${{ steps.build-image.outputs.image }}

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: CatPol-service
        cluster: CatPol
        wait-for-service-stability: true
